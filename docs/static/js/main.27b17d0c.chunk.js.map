{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAIVC,mBAAS,IAJC,mBAIvCC,EAJuC,KAI3BC,EAJ2B,KAwB9C,OACI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAE5BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAqBO,OACvCN,EAAc,MAOlB,SAEI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAxBc,SAACP,GAGvBF,EAAcE,EAAEQ,OAAOF,a,+BCVdG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCF,EAFnC,+DAIAG,MAAMD,GAJN,cAIbE,EAJa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QAZvB,kBAgBZK,GAhBY,4CAAH,sDCAXO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAIrC,OACI,sBAAKa,UAAU,yCAAf,UAEI,qBAAKC,IAAMd,EAAMe,IAAMN,IACvB,kCAAMA,EAAN,WCLCO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KA0BxC,OAnBAC,qBAAU,WAENvB,EAASC,GACJuB,MAAM,SAAAC,GAEHC,YAAY,WAERJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAGd,UAKZ,CAAEnB,IAEEoB,EDrB2BM,CAAc1B,GAAnCY,EAHwB,EAG7BN,KAAca,EAHe,EAGfA,QAItB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDf,KAEpDmB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OACf,cAAC,EAAD,eAESA,GADEA,EAAIC,aElBtBiB,EAAe,WAAM,MAMMzC,mBAAS,CAAC,cANhB,mBAMvB0C,EANuB,KAMX3C,EANW,KAgB9B,OACI,qCAEI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAIA,6BAEQ2C,EAAWpB,KAAK,SAAAR,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MC5BlC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.27b17d0c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    //PONEMOS EL STRING VACIO EN EL USESTATE SINO EL ESTADO ES UNDEFINDED\n\n    const [inputValue, setInputValue] = useState(\"\");\n\n    const handleInputChange = (e) => {\n        // console.log(e.target.value)\n\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if ( inputValue.trim().length > 2) {\n            \n            setCategories(cats => [inputValue , ...cats]);\n            setInputValue('');\n\n        }\n\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n\n            <input\n                type='text'\n                value= {inputValue}\n                onChange={ handleInputChange }\n            />\n\n\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n\n    export const getGifs = async ( category ) => {\n        // const apiKey = 'Mz5MICvq5WdISqFHjsXgSENkX5yoXsZN';\n        const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=Mz5MICvq5WdISqFHjsXgSENkX5yoXsZN`;\n\n        const resp = await fetch(url);\n        // resp.ok?\n        const { data } = await resp.json();\n\n        const gifs = data.map( img => {\n            return {\n                id: img.id,\n                title: img.title,\n                url: img.images?.downsized_medium.url\n            }\n        })\n\n        return gifs;\n\n    }","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n\n    // console.log(id, title, url)\n\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n\n            <img src={ url } alt={ title }/>\n            <p> { title } </p>\n\n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n//RENOMBRAMOS LA VARIABLE DATA CON LOS : POR IMAGES\n    const { data:images , loading } = useFetchGifs( category );\n\n    // console.log( loading)\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\"> { category }</h3>\n\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n\n            <div className='card-grid'>\n                {\n                    //ACA LLAMAMOS AL USE STATE PARA TRAER LO REALIZADO EN GETGIFS\n                    images.map( img => (\n                    <GifGridItem \n                        key= { img.id }\n                        { ...img }\n                    />                   \n                    ))\n                }    \n            </div>\n        </>\n    )\n}\n","import { useState , useEffect } from 'react';\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        \n        getGifs( category )\n            .then( imgs => {\n\n                setTimeout( () => {\n\n                    setstate({\n                        data: imgs,\n                        loading: false\n                    })\n\n                }, 1000);\n            })\n\n\n        \n    }, [ category ])\n\n    return state;\n\n}","\nimport React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    //ESTO NO NOS SIRVE YA QUE SI QUEREMOS AGREGAR UNA CATEGORIA JS NO PUEDE VOLVER A RENDERIZAR\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball']\n\n    //CREAMOS ESTO PARA PODER AGREGAR CATEGORIAS\n    const [categories, setCategories] = useState(['One Punch']);\n\n    // const handleAdd = () => {\n\n    //     setCategories(cats => [...cats, 'HunterXHunter']);\n\n    // }\n\n\n\n    return (\n        <>\n\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr/>\n\n            {/* <button onClick={ handleAdd } >Agregar</button> */}\n\n            <ol>\n                { \n                    categories.map( category => (\n                        <GifGrid \n                            key={ category }\n                            category={ category }\n                        />\n                    ))\n                }\n            </ol>\n\n\n        </>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}